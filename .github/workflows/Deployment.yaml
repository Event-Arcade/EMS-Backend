# when the code is pushed to the master branch, the workflow will be triggered
# 01. run all the xUnit tests if any test fails, do not build and push the docker image
# 02. build the docker image using the Dockerfile/ do not neet to build the app. it is already built in the docker image
# 03. push the docker image to the AWS ECR
# 04. deploy the docker image to the AWS ECS
name: Deployment

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run xUnit tests
        run: dotnet test --no-restore --verbosity normal

      - name: Build Docker image
        run: docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:latest .

      - name: Push Docker image to ECR
        run: |
          echo ${{ secrets.AWS_ACCESS_KEY_ID }} | docker login --username AWS --password-stdin https://${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:latest

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service ${{ secrets.ECS_SERVICE_NAME }} --force-new-deployment

  

